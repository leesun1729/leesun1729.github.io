[{"categories":["算法"],"contents":"快捷键  ctrl+b (OSX) complie and run ctrl+enter new test ctrl+c (OSX) kill process ctrl+shift+b (OSX) run with debugger ctrl+d delete test ctrl+super+up/ctrl+super+down (OSX) swap tests cmd+k, cmd+p (OSX) close/open right panel  Settings  To edit settings   press and type FastOlympicCoding: Open Settings\ncmd+shift+p (OSX)\n  or Preferences — Package Settings — FastOlympicCoding\n    ","date":"2024-01-20T21:44:49+08:00","permalink":"https://leesun1729.github.io/post/002-sublimt-text4/","tags":["sublimt text4","FastOlympicCode"],"title":"002 Sublimt Text4"},{"categories":["工程"],"contents":"前述 网站构成: hugo + even + github actions , 参考资料:\n https://ouuan.github.io/post/from-hexo-to-hugo/\n 搭建过程 Step 1 引自tom0727的搭建指南 首先阅读ouuan的指南，然后使用他的hugo模版，按照模版里指示的进行clone\nStep 2 Config的修改 还是按照模版里指示的，修改一下配置文件config.toml里的相关配置，一些需要更改的内容：\n 包含yourname的部分 newContentEditor = \u0026quot;\u0026quot; defaultContentLanguage = \u0026quot;en\u0026quot; [[menu.main]]的相关内容 (视情况进行保留和删除) 不要更改 [params] 中的 version=\u0026quot;4.x\u0026quot;  注:这里还有一个需要注意的，执行命令hugo server会出现报错，因为现在不支持google_news.html,解决办法删除目录hugo/themes/even/layouts/partials/head.html的{{- template \u0026quot;_internal/google_news.html\u0026quot; . -}},相关讨论\nStep 2.5 创建repository 因为我打算部署到github pages上，就在github上创建一个新的repository，叫leesun1729.github.io\ngit init git add . git commit -m \u0026quot;first commit\u0026quot; git remote add origin https://github.com/leesun1729/leesun1729.github.io.git git branch -M master git push -u origin master  Step 3 本地测试 配置完成后，可以 hugo new post/test.md 创建一个新的post(在hugo-blog/content/post/test.md), 按照markdown随便写点东西以后保存，然后 hugo server，打开localhost看一下效果 最后用hugo --theme=even --baseURL=\u0026quot;https://leesun1729.github.io/\u0026quot; --buildDrafts命令生成静态文件，就是hugo-blog/public/文件夹，把这个文件夹内的内容push到github上就可以了\ncd public git init git add . git commit -m \u0026quot;first commit\u0026quot; git remote add origin https://github.com/leesun1729/leesun1729.github.io.git git branch -M publish git push -u origin publish  注： blog的源代码和网页内容并不是一个东西!\n 源代码: 是hugo-blog/ 下除了hugo-blog/public/以外的内容，包含了 content/, config.toml 之类的文件。 网页内容：只是 hugo-blog/public/内的内容，有了源代码就可以用hugo生成网页内容，但是反之就不可以！  既然两者有别，就要分开管理，我把它们放在同一个repository里，分成2个branch。源代码就放在了master里，网页内容就放在publish上了。\nStep 4 Github Settings 这个时候网页上应该是没有内容的，因为github pages需要设置一下指定deploy的branch，在repository的Settings里，拉到下面看到GitHub Pages，改一下Source branch就可以了：  需要在博文里插入图片的话，假设图片位于 static/images/001/1.png，就写上![image](/images/001/1.png)\n如果是插入link的话，就写 [link_name](https://...) 即可，外部链接记得加https://，不然会被当作本地的某个文件位置。\n 这些步骤做完就可以了，当然这种修改然后发布的方式太麻烦了，切branch也很累，所以就有了Step 5:\nStep 5 Github Actions 我们配置一下Github actions，它能自动化部署流程。参考资料:\n https://segmentfault.com/a/1190000021815477\n 需要注意，因为源代码和网页内容在同一个repository里，就不用在github上折腾secret key之类的了，直接修改一下 hugo-blog/.github/workflows/deploy.yml (这个是template里自带的) 即可：\n personal_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: publish 将 depth 改成 fetch-depth (不然build的时候会报错)  这样就完成了，从此以后，写一篇新文章的步骤就变成：\n hugo new post/article.md 修改位于content/post/article.md的博客文章 add, commit, 把源代码push到master  这样就可以了，不必切branch然后push网页内容了。\nStep 6 其他 更多内容请参考tom0727的搭建指南\n","date":"2024-01-20T21:06:30+08:00","permalink":"https://leesun1729.github.io/post/001-hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0/","tags":["hugo","博客"],"title":"Hugo博客搭建记"},{"categories":[""],"contents":"Hello, this is Leesun! About me  A college student   Contact  Email: leesun1729@gmail.com QQ/Wechat: 746671499  ","date":"2024-01-20T21:05:36+08:00","permalink":"https://leesun1729.github.io/about/","tags":["",""],"title":"About"},{"categories":null,"contents":"","date":"2024-01-20T21:04:20+08:00","permalink":"https://leesun1729.github.io/search/","tags":null,"title":"搜索"},{"categories":[""],"contents":"友情链接 ","date":"2024-01-20T21:00:56+08:00","permalink":"https://leesun1729.github.io/links/","tags":["",""],"title":"Links"}]